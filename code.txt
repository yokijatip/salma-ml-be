1. auth.py
from passlib.context import CryptContext
from jose import JWTError, jwt
from datetime import datetime, timedelta
import os

SECRET_KEY = os.getenv("SECRET_KEY", "your-secret-key-here-change-in-production")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

def create_access_token(data: dict, expires_delta: timedelta = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=15))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

2. check_dataset.py
# file: check_dataset.py
import pandas as pd

def check_dataset(csv_path):
    """
    Cek struktur dan isi dataset
    """
    try:
        df = pd.read_csv(csv_path)
        
        print(f"Dataset loaded successfully!")
        print(f"Shape: {df.shape}")
        print(f"\nColumns: {list(df.columns)}")
        
        print(f"\nFirst 5 rows:")
        print(df.head())
        
        print(f"\nDataset info:")
        print(df.info())
        
        if 'Kategori' in df.columns:
            print(f"\nKategori distribution:")
            print(df['Kategori'].value_counts())
        
        # Cek missing values
        missing = df.isnull().sum()
        if missing.sum() > 0:
            print(f"\nMissing values:")
            print(missing[missing > 0])
        else:
            print(f"\nNo missing values found!")
        
        return True
        
    except Exception as e:
        print(f"Error: {str(e)}")
        return False

if __name__ == "__main__":
    csv_path = "app/tpq_dataset.csv"  # Sesuaikan dengan lokasi file Anda
    check_dataset(csv_path)

3. database.py
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

DATABASE_URL = "sqlite:///./sql_app.db"

engine = create_engine(
    DATABASE_URL, connect_args={"check_same_thread": False}
)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

4. main.py
from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.orm import Session
from .database import Base, engine, SessionLocal
from . import models, auth
from pydantic import BaseModel
from fastapi.security import OAuth2PasswordRequestForm
from fastapi import status
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from typing import List
from .ml_model import predict_performance

# Untuk menjalankan server local menggunakan uvicorn 
# uvicorn app.main:app --reload

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="login")


models.Base.metadata.create_all(bind=engine)

app = FastAPI()

# Dependency DB
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Schemas
class UserCreate(BaseModel):
    username: str
    password: str
    role: str  # "admin" atau "orang_tua"


class UserResponse(BaseModel):
    id: int
    username: str
    role: str

    class Config:
        orm_mode = True

class StudentBase(BaseModel):
    name: str
    kelas: str
    al_quran_iqro: int
    hafalan_surat_pendek: int
    hafalan_doa: int
    hafalan_ayat_pilihan: int
    bahasa_arab: int
    bahasa_inggris: int
    khat_menulis: int
    menggambar_mewarnai: int
    jasmani_kesehatan: int
    kreativitas_keaktifan: int
    ulumul_quran: int
    kemampuan_berbahasa: int

class StudentCreate(StudentBase):
    orang_tua_id: int


class StudentResponse(StudentBase):
    id: int
    rata_rata: float
    kategori: str
    orang_tua_id: int

    class Config:
        orm_mode = True

class PredictRequest(BaseModel):
    al_quran_iqro: int
    hafalan_surat_pendek: int
    hafalan_doa: int
    hafalan_ayat_pilihan: int
    bahasa_arab: int
    bahasa_inggris: int
    khat_menulis: int
    menggambar_mewarnai: int
    jasmani_kesehatan: int
    kreativitas_keaktifan: int
    ulumul_quran: int
    kemampuan_berbahasa: int

class PredictResponse(BaseModel):
    kategori: str


def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)) -> models.User:
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Tidak dapat memvalidasi token",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, auth.SECRET_KEY, algorithms=[auth.ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception
    
    user = db.query(models.User).filter(models.User.username == username).first()
    if user is None:
        raise credentials_exception
    return user

def calculate_average_and_category(student_data):
    """
    Menghitung rata-rata dan kategori berdasarkan 12 mata pelajaran
    """
    # Ambil semua nilai mata pelajaran (exclude name, kelas, orang_tua_id)
    subjects = [
        student_data.al_quran_iqro,
        student_data.hafalan_surat_pendek,
        student_data.hafalan_doa,
        student_data.hafalan_ayat_pilihan,
        student_data.bahasa_arab,
        student_data.bahasa_inggris,
        student_data.khat_menulis,
        student_data.menggambar_mewarnai,
        student_data.jasmani_kesehatan,
        student_data.kreativitas_keaktifan,
        student_data.ulumul_quran,
        student_data.kemampuan_berbahasa
    ]
    
    # Hitung rata-rata
    rata_rata = sum(subjects) / len(subjects)
    
    # Tentukan kategori
    if rata_rata >= 85:
        kategori = "BSB"
    elif rata_rata >= 70:
        kategori = "BSH"
    elif rata_rata >= 60:
        kategori = "MB"
    else:
        kategori = "BB"
    
    return round(rata_rata, 2), kategori


# Register
@app.post("/register")
def register(user: UserCreate, db: Session = Depends(get_db)):
    db_user = db.query(models.User).filter(models.User.username == user.username).first()
    if db_user:
        raise HTTPException(status_code=400, detail="Username sudah terdaftar")
    hashed_password = auth.get_password_hash(user.password)
    new_user = models.User(username=user.username, hashed_password=hashed_password, role=user.role)
    db.add(new_user)
    db.commit()
    db.refresh(new_user)
    return {"message": "Registrasi berhasil"}

# Login
@app.post("/login")
def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
    user = db.query(models.User).filter(models.User.username == form_data.username).first()
    if not user or not auth.verify_password(form_data.password, user.hashed_password):
        raise HTTPException(status_code=400, detail="Login gagal")
    
    access_token = auth.create_access_token(data={"sub": user.username, "role": user.role})
    return {"access_token": access_token, "token_type": "bearer"}

@app.get("/me", response_model=UserResponse)
def read_users_me(current_user: models.User = Depends(get_current_user)):
    return current_user

from typing import List

# Fungsi untuk membuat data siswa
@app.post("/students", response_model=StudentResponse)
def create_student(student: StudentCreate, db: Session = Depends(get_db), current_user: models.User = Depends(get_current_user)):
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="Hanya admin yang bisa menambah data siswa")
    
    # Hitung rata-rata dan kategori
    rata_rata, kategori = calculate_average_and_category(student)
    
    # Buat student baru
    student_dict = student.dict()
    student_dict["rata_rata"] = rata_rata
    student_dict["kategori"] = kategori
    
    new_student = models.Student(**student_dict)
    db.add(new_student)
    db.commit()
    db.refresh(new_student)
    return new_student

# Fungsi untuk mengambil semua data siswa
@app.get("/students", response_model=List[StudentResponse])
def get_students(db: Session = Depends(get_db), current_user: models.User = Depends(get_current_user)):
    return db.query(models.Student).all()

# Fungsi untuk mengambil data siswa berdasarkan ID
@app.get("/students/{id}", response_model=StudentResponse)
def get_student_by_id(id: int, db: Session = Depends(get_db), current_user: models.User = Depends(get_current_user)):
    student = db.query(models.Student).filter(models.Student.id == id).first()
    if not student:
        raise HTTPException(status_code=404, detail="Siswa tidak ditemukan")
    
    # Jika role orang_tua, hanya boleh akses miliknya sendiri
    if current_user.role == "orang_tua" and student.orang_tua_id != current_user.id:
        raise HTTPException(status_code=403, detail="Akses ditolak")
    
    return student

# Fungsi untuk mengupdate data siswa
@app.put("/students/{id}", response_model=StudentResponse)
def update_student(id: int, updated: StudentBase, db: Session = Depends(get_db), current_user: models.User = Depends(get_current_user)):
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="Hanya admin yang bisa edit data siswa")

    student = db.query(models.Student).filter(models.Student.id == id).first()
    if not student:
        raise HTTPException(status_code=404, detail="Siswa tidak ditemukan")

    # Hitung rata-rata dan kategori yang baru
    rata_rata, kategori = calculate_average_and_category(updated)
    
    # Update semua field
    for key, value in updated.dict().items():
        setattr(student, key, value)
    
    # Set rata-rata dan kategori
    student.rata_rata = rata_rata
    student.kategori = kategori

    db.commit()
    db.refresh(student)
    return student

# Fungsi untuk menghapus data siswa
@app.delete("/students/{id}")
def delete_student(id: int, db: Session = Depends(get_db), current_user: models.User = Depends(get_current_user)):
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="Hanya admin yang bisa menghapus data siswa")

    student = db.query(models.Student).filter(models.Student.id == id).first()
    if not student:
        raise HTTPException(status_code=404, detail="Siswa tidak ditemukan")

    db.delete(student)
    db.commit()
    return {"message": "Data siswa berhasil dihapus"}

# Fungsi untuk melakukan prediksi
@app.post("/predict", response_model=PredictResponse)
def predict(data: PredictRequest, current_user: models.User = Depends(get_current_user)):
    result = predict_performance(
        data.al_quran_iqro,
        data.hafalan_surat_pendek,
        data.hafalan_doa,
        data.hafalan_ayat_pilihan,
        data.bahasa_arab,
        data.bahasa_inggris,
        data.khat_menulis,
        data.menggambar_mewarnai,
        data.jasmani_kesehatan,
        data.kreativitas_keaktifan,
        data.ulumul_quran,
        data.kemampuan_berbahasa
    )
    return {"kategori": result}

5. ml_model.py
# file: app/ml_model.py
import pickle
import numpy as np
import pandas as pd
import os

def load_model():
    """Load model dari berbagai kemungkinan lokasi"""
    model_paths = [
        "student_model.pkl",  # Root directory
        "app/student_model.pkl",  # App directory  
        os.path.join(os.path.dirname(__file__), "student_model.pkl"),  # Same directory as this file
        os.path.join(os.path.dirname(__file__), "..", "student_model.pkl"),  # Parent directory
    ]
    
    for path in model_paths:
        try:
            if os.path.exists(path):
                with open(path, "rb") as f:
                    model = pickle.load(f)
                print(f"Model loaded from: {path}")
                return model
        except Exception as e:
            print(f"Failed to load model from {path}: {e}")
            continue
    
    raise FileNotFoundError(
        "Model file tidak ditemukan! Pastikan sudah menjalankan train_model.py terlebih dahulu."
    )

# Load model sekali saja saat app berjalan
try:
    model = load_model()
except FileNotFoundError as e:
    print(f"WARNING: {e}")
    model = None

# Feature names yang sama dengan yang digunakan saat training
FEATURE_NAMES = [
    'Al_Quran_Iqro', 'Hafalan_Surat_Pendek', 'Hafalan_Doa', 'Hafalan_Ayat_Pilihan',
    'Bahasa_Arab', 'Bahasa_Inggris', 'Khat_Menulis', 'Menggambar_Mewarnai',
    'Jasmani_Kesehatan', 'Kreativitas_Keaktifan', 'Ulumul_Quran', 'Kemampuan_Berbahasa'
]

def predict_performance(al_quran_iqro, hafalan_surat_pendek, hafalan_doa, hafalan_ayat_pilihan, 
                       bahasa_arab, bahasa_inggris, khat_menulis, menggambar_mewarnai, 
                       jasmani_kesehatan, kreativitas_keaktifan, ulumul_quran, kemampuan_berbahasa):
    """
    Prediksi performa siswa berdasarkan 12 mata pelajaran
    """
    if model is None:
        raise Exception("Model tidak tersedia. Jalankan train_model.py terlebih dahulu.")
    
    # Buat DataFrame dengan nama kolom yang sama seperti saat training
    input_data = pd.DataFrame([{
        'Al_Quran_Iqro': al_quran_iqro,
        'Hafalan_Surat_Pendek': hafalan_surat_pendek,
        'Hafalan_Doa': hafalan_doa,
        'Hafalan_Ayat_Pilihan': hafalan_ayat_pilihan,
        'Bahasa_Arab': bahasa_arab,
        'Bahasa_Inggris': bahasa_inggris,
        'Khat_Menulis': khat_menulis,
        'Menggambar_Mewarnai': menggambar_mewarnai,
        'Jasmani_Kesehatan': jasmani_kesehatan,
        'Kreativitas_Keaktifan': kreativitas_keaktifan,
        'Ulumul_Quran': ulumul_quran,
        'Kemampuan_Berbahasa': kemampuan_berbahasa
    }])
    
    # Pastikan urutan kolom sama dengan saat training
    input_data = input_data[FEATURE_NAMES]
    
    prediction = model.predict(input_data)
    return prediction[0]

6. models.py
from sqlalchemy import Column, Integer, String, ForeignKey, Float
from sqlalchemy.orm import relationship
from .database import Base

class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    hashed_password = Column(String)
    role = Column(String)  # admin atau orang_tua

class Student(Base):
    __tablename__ = "students"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    kelas = Column(String)
    
    # 12 Mata Pelajaran
    al_quran_iqro = Column(Integer)
    hafalan_surat_pendek = Column(Integer)
    hafalan_doa = Column(Integer)
    hafalan_ayat_pilihan = Column(Integer)
    bahasa_arab = Column(Integer)
    bahasa_inggris = Column(Integer)
    khat_menulis = Column(Integer)
    menggambar_mewarnai = Column(Integer)
    jasmani_kesehatan = Column(Integer)
    kreativitas_keaktifan = Column(Integer)
    ulumul_quran = Column(Integer)
    kemampuan_berbahasa = Column(Integer)
    
    # Calculated fields
    rata_rata = Column(Float)
    kategori = Column(String)
    
    # Foreign key
    orang_tua_id = Column(Integer, ForeignKey("users.id"))

    orang_tua = relationship("User")

7.test_model.py
# file: test_model.py
import pickle
import numpy as np

def test_model():
    """
    Test model yang sudah di-train
    """
    try:
        # Load model
        with open("student_model.pkl", "rb") as f:
            model = pickle.load(f)
        
        print("Model loaded successfully!")
        print(f"Model type: {type(model)}")
        
        # Test dengan data sample
        test_cases = [
            # [Al_Quran_Iqro, Hafalan_Surat_Pendek, Hafalan_Doa, Hafalan_Ayat_Pilihan,
            #  Bahasa_Arab, Bahasa_Inggris, Khat_Menulis, Menggambar_Mewarnai,
            #  Jasmani_Kesehatan, Kreativitas_Keaktifan, Ulumul_Quran, Kemampuan_Berbahasa]
            
            # Test case 1: Nilai rendah (Expected: BB)
            [45, 50, 48, 52, 47, 49, 46, 51, 48, 50, 47, 49],
            
            # Test case 2: Nilai sedang (Expected: MB)
            [65, 62, 68, 64, 66, 63, 67, 65, 64, 66, 65, 63],
            
            # Test case 3: Nilai baik (Expected: BSH)
            [78, 75, 80, 77, 79, 76, 78, 82, 75, 80, 77, 79],
            
            # Test case 4: Nilai sangat baik (Expected: BSB)
            [92, 88, 95, 90, 93, 87, 91, 94, 89, 96, 90, 92],
            
            # Test case 5: Data dari contoh Anda
            [83, 77, 69, 75, 82, 74, 72, 85, 76, 82, 84, 82]
        ]
        
        expected_results = ["BB", "MB", "BSH", "BSB", "BSH"]
        
        print("\n=== TESTING MODEL ===")
        for i, test_data in enumerate(test_cases):
            # Prediksi
            input_data = np.array([test_data])
            prediction = model.predict(input_data)[0]
            
            # Hitung rata-rata manual untuk verifikasi
            avg = sum(test_data) / len(test_data)
            
            print(f"\nTest Case {i+1}:")
            print(f"Input: {test_data}")
            print(f"Average: {avg:.2f}")
            print(f"Expected: {expected_results[i]}")
            print(f"Predicted: {prediction}")
            print(f"Match: {'✓' if prediction == expected_results[i] else '✗'}")
        
        print("\n=== MODEL INFO ===")
        if hasattr(model, 'feature_importances_'):
            feature_names = [
                'Al_Quran_Iqro', 'Hafalan_Surat_Pendek', 'Hafalan_Doa', 'Hafalan_Ayat_Pilihan',
                'Bahasa_Arab', 'Bahasa_Inggris', 'Khat_Menulis', 'Menggambar_Mewarnai',
                'Jasmani_Kesehatan', 'Kreativitas_Keaktifan', 'Ulumul_Quran', 'Kemampuan_Berbahasa'
            ]
            
            importance_pairs = list(zip(feature_names, model.feature_importances_))
            importance_pairs.sort(key=lambda x: x[1], reverse=True)
            
            print("\nFeature Importance (Top 5):")
            for name, importance in importance_pairs[:5]:
                print(f"{name}: {importance:.4f}")
        
        return True
        
    except FileNotFoundError:
        print("Model file tidak ditemukan. Jalankan train_model.py terlebih dahulu.")
        return False
    except Exception as e:
        print(f"Error testing model: {str(e)}")
        return False

if __name__ == "__main__":
    test_model()

8. train_model.py
# file: app/train_model.py
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
import pickle

def train_model_with_csv(csv_file_path):
    """
    Train model menggunakan dataset CSV
    """
    try:
        # Load dataset
        print("Loading dataset...")
        df = pd.read_csv(csv_file_path)
        print(f"Dataset loaded: {len(df)} rows")
        
        # Cek kolom yang diperlukan (sesuaikan dengan dataset Anda)
        required_columns = [
            'Al_Quran_Iqro', 'Hafalan_Surat_Pendek', 'Hafalan_Doa', 'Hafalan_Ayat_Pilihan',
            'Bahasa_Arab', 'Bahasa_Inggris', 'Khat_Menulis', 'Menggambar_Mewarnai',
            'Jasmani_Kesehatan', 'Kreativitas_Keaktifan', 'Ulumul_Quran', 'Kemampuan_Berbahasa',
            'Kategori'
        ]
        
        # Pastikan semua kolom ada
        missing_columns = [col for col in required_columns if col not in df.columns]
        if missing_columns:
            print(f"Missing columns: {missing_columns}")
            print(f"Available columns: {list(df.columns)}")
            return False
        
        # Prepare features dan target
        X = df[[
            'Al_Quran_Iqro', 'Hafalan_Surat_Pendek', 'Hafalan_Doa', 'Hafalan_Ayat_Pilihan',
            'Bahasa_Arab', 'Bahasa_Inggris', 'Khat_Menulis', 'Menggambar_Mewarnai',
            'Jasmani_Kesehatan', 'Kreativitas_Keaktifan', 'Ulumul_Quran', 'Kemampuan_Berbahasa'
        ]]
        y = df['Kategori']
        
        print(f"Features shape: {X.shape}")
        print(f"Target distribution:\n{y.value_counts()}")
        
        # Split data
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)
        
        # Training model
        print("Training model...")
        model = RandomForestClassifier(
            n_estimators=100,
            random_state=42,
            max_depth=10,
            min_samples_split=5,
            min_samples_leaf=2
        )
        model.fit(X_train, y_train)
        
        # Evaluasi model
        train_accuracy = model.score(X_train, y_train)
        test_accuracy = model.score(X_test, y_test)
        
        print(f"Training Accuracy: {train_accuracy:.4f}")
        print(f"Testing Accuracy: {test_accuracy:.4f}")
        
        # Prediksi untuk classification report
        y_pred = model.predict(X_test)
        print("\nClassification Report:")
        print(classification_report(y_test, y_pred))
        
        # Simpan model
        with open("app/student_model.pkl", "wb") as f:
            pickle.dump(model, f)
        
        print("Model berhasil disimpan ke app/student_model.pkl")
        return True
        
    except Exception as e:
        print(f"Error training model: {str(e)}")
        return False

def create_sample_data():
    """
    Buat sample data jika tidak ada CSV
    """
    print("Creating sample data...")
    
    # Data sample yang lebih realistis
    import random
    
    data = []
    for i in range(1000):
        # Generate nilai dengan pola tertentu
        base_performance = random.choice(['low', 'medium', 'high', 'excellent'])
        
        if base_performance == 'low':
            values = [random.randint(40, 59) for _ in range(12)]
            kategori = 'BB'
        elif base_performance == 'medium':
            values = [random.randint(60, 69) for _ in range(12)]
            kategori = 'MB'
        elif base_performance == 'high':
            values = [random.randint(70, 84) for _ in range(12)]
            kategori = 'BSH'
        else:  # excellent
            values = [random.randint(85, 100) for _ in range(12)]
            kategori = 'BSB'
        
        # Tambah sedikit variasi
        values = [max(0, min(100, val + random.randint(-5, 5))) for val in values]
        
        row = {
            'ID': i+1,
            'Nama': f'Siswa_{i+1}',
            'Kelas': random.choice(['I.1', 'I.2', 'I.3', 'I.4', 'I.5']),
            'Al_Quran_Iqro': values[0],
            'Hafalan_Surat_Pendek': values[1],
            'Hafalan_Doa': values[2],
            'Hafalan_Ayat_Pilihan': values[3],
            'Bahasa_Arab': values[4],
            'Bahasa_Inggris': values[5],
            'Khat_Menulis': values[6],
            'Menggambar_Mewarnai': values[7],
            'Jasmani_Kesehatan': values[8],
            'Kreativitas_Keaktifan': values[9],
            'Ulumul_Quran': values[10],
            'Kemampuan_Berbahasa': values[11],
            'Rata_Rata': sum(values) / len(values),
            'Kategori': kategori
        }
        data.append(row)
    
    df = pd.DataFrame(data)
    df.to_csv('sample_dataset.csv', index=False)
    print("Sample dataset saved to sample_dataset.csv")
    return df

if __name__ == "__main__":
    # Path ke dataset CSV Anda
    # csv_path = "tpq_dataset.csv"  # Jika di root project
    csv_path = "app/tpq_dataset.csv"  # Jika di folder app/
    
    # Coba load dataset CSV Anda
    try:
        success = train_model_with_csv(csv_path)
        if not success:
            print("Gagal load dataset, membuat sample data...")
            df = create_sample_data()
            train_model_with_csv('sample_dataset.csv')
    except FileNotFoundError:
        print(f"File {csv_path} tidak ditemukan!")
        print("Pastikan file CSV sudah diletakkan di lokasi yang benar.")
        print("Atau buat sample data dengan uncomment baris di bawah:")
        # df = create_sample_data()
        # train_model_with_csv('sample_dataset.csv')